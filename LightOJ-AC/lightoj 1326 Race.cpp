/*
  Name: LightOJ 1326 Race
  Author: 3T //mailto:kasparovandme@gmail.com
  Date: 8/11/2012
  Description: dp, counting
  Time Limit: 1.000s
*/

#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define fr(i,a,b) for (int i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (int i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (int i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (int i = (n) - 1; i >= 0; i--)
#define FOR(i,a,b) for (int i = (a), _b = (b); i <= _b; i++)
#define FORD(i,a,b) for (int i = (a), _b = (b); i >= _b; i--)
#define REP(i,n) for (int i = 0, _n = (n); i < _n; i++)
#define REPD(i,n) for (int i = (n) - 1; i >= 0; i--)
#define foreach(it, ar) for ( typeof(ar.begin()) it = ar.begin(); it != ar.end(); it++ )
#define fill(ar, val) memset(ar, val, sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define uint64 unsigned long long
#define int64 long long
#define all(ar) ar.begin(), ar.end()
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

#define BIT(n) (1<<(n))
#define AND(a,b) ((a) & (b))
#define OR(a,b) ((a) | (b))
#define XOR(a,b) ((a) ^ (b))
#define sqr(x) ((x) * (x))

#define PI 3.1415926535897932385
#define INF 1000111222
#define EPS 1e-7
#define MAXN 1000
#define MOD 10056

#define INP "test.inp"
#define OUT "test.out"

typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<string> vs;

template<typename T>inline T gcd(T a, T b){if (b == 0)return a;else return gcd(b, a % b);}
template<typename T>inline T lcm(T a, T b){return (a * b) / gcd(a, b);}

int n, t, m, a, b, c[MAXN+5][MAXN+5], f[MAXN+5];
//int ans[]={0,1,3,13,75,541,4683,7069,2811,7837,8211,6469,867,1909,3963,3061,7683,3253,2643,9805,7467,10021,9699,3157,6915,9133,1827,7093,939,5341,8619,2317,4443,7813,10035,9541,6579,349,7323,6469,7467,5413,9027,3421,8955,8125,4731,877,7875,6493,1875,9205,4971,2413,1563,1597,1179,9853,1539,1381,531,301,1779,5989,7707,1909,8235,541,5379,9421,147,3877,5667,4405,1971,277,1347,9301,4131,7165,7995,8509,2331,4165,6867,6829,3531,3013,8163,3661,5955,4957,2667,2365,9147,8557,1203,6493,9435,8005,10011,1549,3603,2317,1467,9781,915,8053,1539,5941,9555,5749,7131,4117,3435,2845,579,733,7707,4789,195,7525,6555,3565,5811,469,6987,4669,10011,9853,4131,8677,411,5701,6219,7741,6651,7693,123,8557,8211,9685,507,6829,6147,9877,7059,9877,9459,7141,3795,2941,8787,5941,2019,1021,7755,7093,7131,1693,4275,469,387,2773,2019,5221,7155,9781,8187,7813,9963,4645,1587,7405,8667,1405,2715,4573,7971,2869,1635,4981,5067,8173,435,8077,387,7741,7803,8413,1899,805,9963,1189,2115,205,1107,613,6267,7237,1299,4141,7563,853,3915,3301,7179,3349,8427,5701,9483,6685,891,4621,7731,5149,9747,5029,4059,8701,651,7813,5715,5293,2331,2101,5163,5389,7083,7909,4251,13,9147,9469,8499,3157,7419,3901,483,5533,7755,4837,2283,5533,3963,7165,2043,8125,8019,1069,3459,6493,4371,1573,3171,253,243,5533,339,9013,8091,5197,3915,4501,1683,9541,9099,9013,4251,4309,7299,8917,963,9853,6723,4357,2643,4285,3579,8845,8691,6685,3291,8677,9243,3565,8115,5845,2283,3493,9819,8461,6387,7093,4083,2725,627,7645,339,8581,9483,4357,2331,5773,747,9637,9939,2629,1683,3973,7323,5533,1899,4909,9723,7309,4755,6277,1707,6373,1011,2533,4179,9589,7971,5605,7035,8173,3555,4309,7347,4357,1035,9181,7059,7285,99,6109,7683,9325,6435,2581,1203,6253,5115,3037,435,9493,2595,4189,4347,7765,5043,4261,6099,7405,6339,4501,8091,4189,8211,8845,3507,2845,8595,1213,10011,877,9651,1501,3459,3949,3075,6469,8763,4645,8091,133,3291,9469,867,4837,7251,61,5859,3829,9243,781,5667,8269,2451,2101,5163,8029,339,4477,8739,2533,6555,517,339,3949,2595,5581,1131,6109,2955,7213,3267,4573,6219,9349,4659,2077,1419,3493,6003,2413,3771,5029,3,13,75,541,4683,7069,2811,7837,8211,6469,867,1909,3963,3061,7683,3253,2643,9805,7467,10021,9699,3157,6915,9133,1827,7093,939,5341,8619,2317,4443,7813,10035,9541,6579,349,7323,6469,7467,5413,9027,3421,8955,8125,4731,877,7875,6493,1875,9205,4971,2413,1563,1597,1179,9853,1539,1381,531,301,1779,5989,7707,1909,8235,541,5379,9421,147,3877,5667,4405,1971,277,1347,9301,4131,7165,7995,8509,2331,4165,6867,6829,3531,3013,8163,3661,5955,4957,2667,2365,9147,8557,1203,6493,9435,8005,10011,1549,3603,2317,1467,9781,915,8053,1539,5941,9555,5749,7131,4117,3435,2845,579,733,7707,4789,195,7525,6555,3565,5811,469,6987,4669,10011,9853,4131,8677,411,5701,6219,7741,6651,7693,123,8557,8211,9685,507,6829,6147,9877,7059,9877,9459,7141,3795,2941,8787,5941,2019,1021,7755,7093,7131,1693,4275,469,387,2773,2019,5221,7155,9781,8187,7813,9963,4645,1587,7405,8667,1405,2715,4573,7971,2869,1635,4981,5067,8173,435,8077,387,7741,7803,8413,1899,805,9963,1189,2115,205,1107,613,6267,7237,1299,4141,7563,853,3915,3301,7179,3349,8427,5701,9483,6685,891,4621,7731,5149,9747,5029,4059,8701,651,7813,5715,5293,2331,2101,5163,5389,7083,7909,4251,13,9147,9469,8499,3157,7419,3901,483,5533,7755,4837,2283,5533,3963,7165,2043,8125,8019,1069,3459,6493,4371,1573,3171,253,243,5533,339,9013,8091,5197,3915,4501,1683,9541,9099,9013,4251,4309,7299,8917,963,9853,6723,4357,2643,4285,3579,8845,8691,6685,3291,8677,9243,3565,8115,5845,2283,3493,9819,8461,6387,7093,4083,2725,627,7645,339,8581,9483,4357,2331,5773,747,9637,9939,2629,1683,3973,7323,5533,1899,4909,9723,7309,4755,6277,1707,6373,1011,2533,4179,9589,7971,5605,7035,8173,3555,4309,7347,4357,1035,9181,7059,7285,99,6109,7683,9325,6435,2581,1203,6253,5115,3037,435,9493,2595,4189,4347,7765,5043,4261,6099,7405,6339,4501,8091,4189,8211,8845,3507,2845,8595,1213,10011,877,9651,1501,3459,3949,3075,6469,8763,4645,8091,133,3291,9469,867,4837,7251,61,5859,3829,9243,781,5667,8269,2451,2101,5163,8029,339,4477,8739,2533,6555,517,339,3949,2595,5581,1131,6109,2955,7213,3267,4573,6219,9349,4659,2077,1419,3493,6003,2413,3771,5029,3,13,75,541,4683,7069,2811,7837,8211,6469,867,1909,3963,3061,7683,3253,2643,9805,7467,10021,9699,3157,6915,9133,1827,7093,939,5341,8619,2317,4443,7813,10035,9541,6579,349,7323,6469,7467,5413,9027,3421,8955,8125,4731,877,7875,6493,1875,9205,4971,2413,1563,1597,1179,9853,1539,1381,531,301,1779,5989,7707,1909,8235,541,5379,9421,147,3877,5667,4405,1971,277,1347,9301,4131,7165,7995,8509,2331,4165,6867,6829,3531,3013,8163,3661,5955,4957,2667,2365,9147,8557,1203,6493,9435,8005,10011,1549,3603,2317,1467,9781,915,8053,1539,5941,9555,5749,7131,4117,3435,2845,579,733,7707,4789,195,7525,6555,3565,5811,469,6987,4669,10011,9853,4131,8677,411,5701,6219,7741,6651,7693,123,8557,8211,9685,507,6829,6147,9877,7059,9877,9459,7141,3795,2941,8787,5941,2019,1021,7755,7093,7131,1693,4275,469,387,2773,2019};

void pre(){
    fill(c,0);
    c[1][1] = 1;
    FOR(i,2,MAXN){
        c[i][1] = i; c[i][i] = 1;
        FOR(j,2,i-1){
            c[i][j] = c[i-1][j] + c[i-1][j-1];
            c[i][j] %= MOD;    
        }    
    } 
    
    fill(f,0);
    f[0] = f[1] = 1;
    FOR(i,2,MAXN){
        int tmp = 0;
        FOR(j,1,i){
            tmp += c[i][j] * f[i-j];
            tmp %= MOD;    
        }    
        f[i] = tmp;
    }   
}

int main () {
    #ifndef ONLINE_JUDGE
    freopen(INP, "r", stdin); freopen(OUT, "w", stdout);
    #endif
    
    pre();
    scanf("%d", &t);
    FOR(tt,1,t){
        scanf("%d", &n);
        printf("Case %d: %d\n", tt, f[n]);    
    }
    return 0;
}
